/**
 * Catapult REST API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.7.8
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.1-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "NamespaceNameDTO.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

NamespaceNameDTO::NamespaceNameDTO()
{
    m_ParentIdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
}

NamespaceNameDTO::~NamespaceNameDTO()
{
}

void NamespaceNameDTO::validate()
{
    // TODO: implement validation
}

web::json::value NamespaceNameDTO::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_ParentIdIsSet)
    {
        val[utility::conversions::to_string_t("parentId")] = ModelBase::toJson(m_ParentId);
    }
    val[utility::conversions::to_string_t("namespaceId")] = ModelBase::toJson(m_NamespaceId);
    val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);

    return val;
}

void NamespaceNameDTO::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("parentId")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("parentId")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<UInt64DTO> newItem(new UInt64DTO());
            newItem->fromJson(fieldValue);
            setParentId( newItem );
        }
    }
    std::shared_ptr<UInt64DTO> newNamespaceId(new UInt64DTO());
    newNamespaceId->fromJson(val[utility::conversions::to_string_t("namespaceId")]);
    setNamespaceId( newNamespaceId );
    setName(ModelBase::stringFromJson(val[utility::conversions::to_string_t("name")]));
}

void NamespaceNameDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_ParentIdIsSet)
    {
        if (m_ParentId.get())
        {
            m_ParentId->toMultipart(multipart, utility::conversions::to_string_t("parentId."));
        }
        
    }
    m_NamespaceId->toMultipart(multipart, utility::conversions::to_string_t("namespaceId."));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
}

void NamespaceNameDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("parentId")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("parentId")))
        {
            std::shared_ptr<UInt64DTO> newItem(new UInt64DTO());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("parentId."));
            setParentId( newItem );
        }
    }
    std::shared_ptr<UInt64DTO> newNamespaceId(new UInt64DTO());
    newNamespaceId->fromMultiPart(multipart, utility::conversions::to_string_t("namespaceId."));
    setNamespaceId( newNamespaceId );
    setName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("name"))));
}

std::shared_ptr<UInt64DTO> NamespaceNameDTO::getParentId() const
{
    return m_ParentId;
}


void NamespaceNameDTO::setParentId(std::shared_ptr<UInt64DTO> value)
{
    m_ParentId = value;
    m_ParentIdIsSet = true;
}
bool NamespaceNameDTO::parentIdIsSet() const
{
    return m_ParentIdIsSet;
}

void NamespaceNameDTO::unsetParentId()
{
    m_ParentIdIsSet = false;
}

std::shared_ptr<UInt64DTO> NamespaceNameDTO::getNamespaceId() const
{
    return m_NamespaceId;
}


void NamespaceNameDTO::setNamespaceId(std::shared_ptr<UInt64DTO> value)
{
    m_NamespaceId = value;
    
}
utility::string_t NamespaceNameDTO::getName() const
{
    return m_Name;
}


void NamespaceNameDTO::setName(utility::string_t value)
{
    m_Name = value;
    
}
}
}
}
}

