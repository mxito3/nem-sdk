/**
 * Catapult REST API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.7.8
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.1-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "NamespaceInfoDTO.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

NamespaceInfoDTO::NamespaceInfoDTO()
{
}

NamespaceInfoDTO::~NamespaceInfoDTO()
{
}

void NamespaceInfoDTO::validate()
{
    // TODO: implement validation
}

web::json::value NamespaceInfoDTO::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("meta")] = ModelBase::toJson(m_Meta);
    val[utility::conversions::to_string_t("namespace")] = ModelBase::toJson(m__namespace);

    return val;
}

void NamespaceInfoDTO::fromJson(web::json::value& val)
{
    std::shared_ptr<NamespaceMosaicMetaDTO> newMeta(new NamespaceMosaicMetaDTO());
    newMeta->fromJson(val[utility::conversions::to_string_t("meta")]);
    setMeta( newMeta );
    std::shared_ptr<NamespaceDTO> new_namespace(new NamespaceDTO());
    new_namespace->fromJson(val[utility::conversions::to_string_t("namespace")]);
    setNamespace( new_namespace );
}

void NamespaceInfoDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    m_Meta->toMultipart(multipart, utility::conversions::to_string_t("meta."));
    m__namespace->toMultipart(multipart, utility::conversions::to_string_t("namespace."));
}

void NamespaceInfoDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    std::shared_ptr<NamespaceMosaicMetaDTO> newMeta(new NamespaceMosaicMetaDTO());
    newMeta->fromMultiPart(multipart, utility::conversions::to_string_t("meta."));
    setMeta( newMeta );
    std::shared_ptr<NamespaceDTO> new_namespace(new NamespaceDTO());
    new_namespace->fromMultiPart(multipart, utility::conversions::to_string_t("namespace."));
    setNamespace( new_namespace );
}

std::shared_ptr<NamespaceMosaicMetaDTO> NamespaceInfoDTO::getMeta() const
{
    return m_Meta;
}


void NamespaceInfoDTO::setMeta(std::shared_ptr<NamespaceMosaicMetaDTO> value)
{
    m_Meta = value;
    
}
std::shared_ptr<NamespaceDTO> NamespaceInfoDTO::getNamespace() const
{
    return m__namespace;
}


void NamespaceInfoDTO::setNamespace(std::shared_ptr<NamespaceDTO> value)
{
    m__namespace = value;
    
}
}
}
}
}

