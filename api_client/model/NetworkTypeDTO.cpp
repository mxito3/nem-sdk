/**
 * Catapult REST API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.7.8
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.1-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "NetworkTypeDTO.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

NetworkTypeDTO::NetworkTypeDTO()
{
    m_Name = utility::conversions::to_string_t("");
    m_Description = utility::conversions::to_string_t("");
}

NetworkTypeDTO::~NetworkTypeDTO()
{
}

void NetworkTypeDTO::validate()
{
    // TODO: implement validation
}

web::json::value NetworkTypeDTO::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    val[utility::conversions::to_string_t("description")] = ModelBase::toJson(m_Description);

    return val;
}

void NetworkTypeDTO::fromJson(web::json::value& val)
{
    setName(ModelBase::stringFromJson(val[utility::conversions::to_string_t("name")]));
    setDescription(ModelBase::stringFromJson(val[utility::conversions::to_string_t("description")]));
}

void NetworkTypeDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("description"), m_Description));
}

void NetworkTypeDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("name"))));
    setDescription(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("description"))));
}

utility::string_t NetworkTypeDTO::getName() const
{
    return m_Name;
}


void NetworkTypeDTO::setName(utility::string_t value)
{
    m_Name = value;
    
}
utility::string_t NetworkTypeDTO::getDescription() const
{
    return m_Description;
}


void NetworkTypeDTO::setDescription(utility::string_t value)
{
    m_Description = value;
    
}
}
}
}
}

