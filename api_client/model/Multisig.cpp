/**
 * Catapult REST API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.7.8
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.1-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Multisig.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Multisig::Multisig()
{
    m_Account = utility::conversions::to_string_t("");
    m_AccountAddress = utility::conversions::to_string_t("");
    m_AccountAddressIsSet = false;
    m_MinApproval = 0;
    m_MinRemoval = 0;
}

Multisig::~Multisig()
{
}

void Multisig::validate()
{
    // TODO: implement validation
}

web::json::value Multisig::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("account")] = ModelBase::toJson(m_Account);
    if(m_AccountAddressIsSet)
    {
        val[utility::conversions::to_string_t("accountAddress")] = ModelBase::toJson(m_AccountAddress);
    }
    val[utility::conversions::to_string_t("minApproval")] = ModelBase::toJson(m_MinApproval);
    val[utility::conversions::to_string_t("minRemoval")] = ModelBase::toJson(m_MinRemoval);
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Cosignatories )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val[utility::conversions::to_string_t("cosignatories")] = web::json::value::array(jsonArray);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_MultisigAccounts )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val[utility::conversions::to_string_t("multisigAccounts")] = web::json::value::array(jsonArray);
    }

    return val;
}

void Multisig::fromJson(web::json::value& val)
{
    setAccount(ModelBase::stringFromJson(val[utility::conversions::to_string_t("account")]));
    if(val.has_field(utility::conversions::to_string_t("accountAddress")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("accountAddress")];
        if(!fieldValue.is_null())
        {
            setAccountAddress(ModelBase::stringFromJson(fieldValue));
        }
    }
    setMinApproval(ModelBase::int32_tFromJson(val[utility::conversions::to_string_t("minApproval")]));
    setMinRemoval(ModelBase::int32_tFromJson(val[utility::conversions::to_string_t("minRemoval")]));
    {
        m_Cosignatories.clear();
        std::vector<web::json::value> jsonArray;
        for( auto& item : val[utility::conversions::to_string_t("cosignatories")].as_array() )
        {
            m_Cosignatories.push_back(ModelBase::stringFromJson(item));
        }
    }
    {
        m_MultisigAccounts.clear();
        std::vector<web::json::value> jsonArray;
        for( auto& item : val[utility::conversions::to_string_t("multisigAccounts")].as_array() )
        {
            m_MultisigAccounts.push_back(ModelBase::stringFromJson(item));
        }
    }
}

void Multisig::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("account"), m_Account));
    if(m_AccountAddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("accountAddress"), m_AccountAddress));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("minApproval"), m_MinApproval));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("minRemoval"), m_MinRemoval));
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Cosignatories )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cosignatories"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
            }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_MultisigAccounts )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("multisigAccounts"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
            }
}

void Multisig::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setAccount(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("account"))));
    if(multipart->hasContent(utility::conversions::to_string_t("accountAddress")))
    {
        setAccountAddress(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("accountAddress"))));
    }
    setMinApproval(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("minApproval"))));
    setMinRemoval(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("minRemoval"))));
    {
        m_Cosignatories.clear();

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("cosignatories"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Cosignatories.push_back(ModelBase::stringFromJson(item));
        }
    }
    {
        m_MultisigAccounts.clear();

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("multisigAccounts"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_MultisigAccounts.push_back(ModelBase::stringFromJson(item));
        }
    }
}

utility::string_t Multisig::getAccount() const
{
    return m_Account;
}


void Multisig::setAccount(utility::string_t value)
{
    m_Account = value;
    
}
utility::string_t Multisig::getAccountAddress() const
{
    return m_AccountAddress;
}


void Multisig::setAccountAddress(utility::string_t value)
{
    m_AccountAddress = value;
    m_AccountAddressIsSet = true;
}
bool Multisig::accountAddressIsSet() const
{
    return m_AccountAddressIsSet;
}

void Multisig::unsetAccountAddress()
{
    m_AccountAddressIsSet = false;
}

int32_t Multisig::getMinApproval() const
{
    return m_MinApproval;
}


void Multisig::setMinApproval(int32_t value)
{
    m_MinApproval = value;
    
}
int32_t Multisig::getMinRemoval() const
{
    return m_MinRemoval;
}


void Multisig::setMinRemoval(int32_t value)
{
    m_MinRemoval = value;
    
}
std::vector<utility::string_t>& Multisig::getCosignatories()
{
    return m_Cosignatories;
}

void Multisig::setCosignatories(std::vector<utility::string_t> value)
{
    m_Cosignatories = value;
    
}
std::vector<utility::string_t>& Multisig::getMultisigAccounts()
{
    return m_MultisigAccounts;
}

void Multisig::setMultisigAccounts(std::vector<utility::string_t> value)
{
    m_MultisigAccounts = value;
    
}
}
}
}
}

