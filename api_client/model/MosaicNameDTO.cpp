/**
 * Catapult REST API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.7.8
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.1-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "MosaicNameDTO.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

MosaicNameDTO::MosaicNameDTO()
{
    m_Name = utility::conversions::to_string_t("");
}

MosaicNameDTO::~MosaicNameDTO()
{
}

void MosaicNameDTO::validate()
{
    // TODO: implement validation
}

web::json::value MosaicNameDTO::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("parentId")] = ModelBase::toJson(m_ParentId);
    val[utility::conversions::to_string_t("mosaicId")] = ModelBase::toJson(m_MosaicId);
    val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);

    return val;
}

void MosaicNameDTO::fromJson(web::json::value& val)
{
    std::shared_ptr<UInt64DTO> newParentId(new UInt64DTO());
    newParentId->fromJson(val[utility::conversions::to_string_t("parentId")]);
    setParentId( newParentId );
    std::shared_ptr<UInt64DTO> newMosaicId(new UInt64DTO());
    newMosaicId->fromJson(val[utility::conversions::to_string_t("mosaicId")]);
    setMosaicId( newMosaicId );
    setName(ModelBase::stringFromJson(val[utility::conversions::to_string_t("name")]));
}

void MosaicNameDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    m_ParentId->toMultipart(multipart, utility::conversions::to_string_t("parentId."));
    m_MosaicId->toMultipart(multipart, utility::conversions::to_string_t("mosaicId."));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
}

void MosaicNameDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    std::shared_ptr<UInt64DTO> newParentId(new UInt64DTO());
    newParentId->fromMultiPart(multipart, utility::conversions::to_string_t("parentId."));
    setParentId( newParentId );
    std::shared_ptr<UInt64DTO> newMosaicId(new UInt64DTO());
    newMosaicId->fromMultiPart(multipart, utility::conversions::to_string_t("mosaicId."));
    setMosaicId( newMosaicId );
    setName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("name"))));
}

std::shared_ptr<UInt64DTO> MosaicNameDTO::getParentId() const
{
    return m_ParentId;
}


void MosaicNameDTO::setParentId(std::shared_ptr<UInt64DTO> value)
{
    m_ParentId = value;
    
}
std::shared_ptr<UInt64DTO> MosaicNameDTO::getMosaicId() const
{
    return m_MosaicId;
}


void MosaicNameDTO::setMosaicId(std::shared_ptr<UInt64DTO> value)
{
    m_MosaicId = value;
    
}
utility::string_t MosaicNameDTO::getName() const
{
    return m_Name;
}


void MosaicNameDTO::setName(utility::string_t value)
{
    m_Name = value;
    
}
}
}
}
}

