/**
 * Catapult REST API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.7.8
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.1-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "TransactionStatusDTO.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

TransactionStatusDTO::TransactionStatusDTO()
{
    m_Group = utility::conversions::to_string_t("");
    m_GroupIsSet = false;
    m_Status = utility::conversions::to_string_t("");
    m_Hash = utility::conversions::to_string_t("");
    m_HashIsSet = false;
    m_DeadlineIsSet = false;
    m_HeightIsSet = false;
}

TransactionStatusDTO::~TransactionStatusDTO()
{
}

void TransactionStatusDTO::validate()
{
    // TODO: implement validation
}

web::json::value TransactionStatusDTO::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_GroupIsSet)
    {
        val[utility::conversions::to_string_t("group")] = ModelBase::toJson(m_Group);
    }
    val[utility::conversions::to_string_t("status")] = ModelBase::toJson(m_Status);
    if(m_HashIsSet)
    {
        val[utility::conversions::to_string_t("hash")] = ModelBase::toJson(m_Hash);
    }
    if(m_DeadlineIsSet)
    {
        val[utility::conversions::to_string_t("deadline")] = ModelBase::toJson(m_Deadline);
    }
    if(m_HeightIsSet)
    {
        val[utility::conversions::to_string_t("height")] = ModelBase::toJson(m_Height);
    }

    return val;
}

void TransactionStatusDTO::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("group")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("group")];
        if(!fieldValue.is_null())
        {
            setGroup(ModelBase::stringFromJson(fieldValue));
        }
    }
    setStatus(ModelBase::stringFromJson(val[utility::conversions::to_string_t("status")]));
    if(val.has_field(utility::conversions::to_string_t("hash")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("hash")];
        if(!fieldValue.is_null())
        {
            setHash(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("deadline")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("deadline")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<UInt64DTO> newItem(new UInt64DTO());
            newItem->fromJson(fieldValue);
            setDeadline( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("height")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("height")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<UInt64DTO> newItem(new UInt64DTO());
            newItem->fromJson(fieldValue);
            setHeight( newItem );
        }
    }
}

void TransactionStatusDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_GroupIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("group"), m_Group));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("status"), m_Status));
    if(m_HashIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("hash"), m_Hash));
        
    }
    if(m_DeadlineIsSet)
    {
        if (m_Deadline.get())
        {
            m_Deadline->toMultipart(multipart, utility::conversions::to_string_t("deadline."));
        }
        
    }
    if(m_HeightIsSet)
    {
        if (m_Height.get())
        {
            m_Height->toMultipart(multipart, utility::conversions::to_string_t("height."));
        }
        
    }
}

void TransactionStatusDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("group")))
    {
        setGroup(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("group"))));
    }
    setStatus(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("status"))));
    if(multipart->hasContent(utility::conversions::to_string_t("hash")))
    {
        setHash(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("hash"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("deadline")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("deadline")))
        {
            std::shared_ptr<UInt64DTO> newItem(new UInt64DTO());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("deadline."));
            setDeadline( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("height")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("height")))
        {
            std::shared_ptr<UInt64DTO> newItem(new UInt64DTO());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("height."));
            setHeight( newItem );
        }
    }
}

utility::string_t TransactionStatusDTO::getGroup() const
{
    return m_Group;
}


void TransactionStatusDTO::setGroup(utility::string_t value)
{
    m_Group = value;
    m_GroupIsSet = true;
}
bool TransactionStatusDTO::groupIsSet() const
{
    return m_GroupIsSet;
}

void TransactionStatusDTO::unsetGroup()
{
    m_GroupIsSet = false;
}

utility::string_t TransactionStatusDTO::getStatus() const
{
    return m_Status;
}


void TransactionStatusDTO::setStatus(utility::string_t value)
{
    m_Status = value;
    
}
utility::string_t TransactionStatusDTO::getHash() const
{
    return m_Hash;
}


void TransactionStatusDTO::setHash(utility::string_t value)
{
    m_Hash = value;
    m_HashIsSet = true;
}
bool TransactionStatusDTO::hashIsSet() const
{
    return m_HashIsSet;
}

void TransactionStatusDTO::unsetHash()
{
    m_HashIsSet = false;
}

std::shared_ptr<UInt64DTO> TransactionStatusDTO::getDeadline() const
{
    return m_Deadline;
}


void TransactionStatusDTO::setDeadline(std::shared_ptr<UInt64DTO> value)
{
    m_Deadline = value;
    m_DeadlineIsSet = true;
}
bool TransactionStatusDTO::deadlineIsSet() const
{
    return m_DeadlineIsSet;
}

void TransactionStatusDTO::unsetDeadline()
{
    m_DeadlineIsSet = false;
}

std::shared_ptr<UInt64DTO> TransactionStatusDTO::getHeight() const
{
    return m_Height;
}


void TransactionStatusDTO::setHeight(std::shared_ptr<UInt64DTO> value)
{
    m_Height = value;
    m_HeightIsSet = true;
}
bool TransactionStatusDTO::heightIsSet() const
{
    return m_HeightIsSet;
}

void TransactionStatusDTO::unsetHeight()
{
    m_HeightIsSet = false;
}

}
}
}
}

