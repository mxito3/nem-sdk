/**
 * Catapult REST API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.7.8
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.1-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "NamespaceMosaicMetaDTO.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

NamespaceMosaicMetaDTO::NamespaceMosaicMetaDTO()
{
    m_Active = false;
    m_Index = 0;
    m_Id = utility::conversions::to_string_t("");
}

NamespaceMosaicMetaDTO::~NamespaceMosaicMetaDTO()
{
}

void NamespaceMosaicMetaDTO::validate()
{
    // TODO: implement validation
}

web::json::value NamespaceMosaicMetaDTO::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("active")] = ModelBase::toJson(m_Active);
    val[utility::conversions::to_string_t("index")] = ModelBase::toJson(m_Index);
    val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);

    return val;
}

void NamespaceMosaicMetaDTO::fromJson(web::json::value& val)
{
    setActive(ModelBase::boolFromJson(val[utility::conversions::to_string_t("active")]));
    setIndex(ModelBase::int32_tFromJson(val[utility::conversions::to_string_t("index")]));
    setId(ModelBase::stringFromJson(val[utility::conversions::to_string_t("id")]));
}

void NamespaceMosaicMetaDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("active"), m_Active));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("index"), m_Index));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
}

void NamespaceMosaicMetaDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setActive(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("active"))));
    setIndex(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("index"))));
    setId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
}

bool NamespaceMosaicMetaDTO::isActive() const
{
    return m_Active;
}


void NamespaceMosaicMetaDTO::setActive(bool value)
{
    m_Active = value;
    
}
int32_t NamespaceMosaicMetaDTO::getIndex() const
{
    return m_Index;
}


void NamespaceMosaicMetaDTO::setIndex(int32_t value)
{
    m_Index = value;
    
}
utility::string_t NamespaceMosaicMetaDTO::getId() const
{
    return m_Id;
}


void NamespaceMosaicMetaDTO::setId(utility::string_t value)
{
    m_Id = value;
    
}
}
}
}
}

