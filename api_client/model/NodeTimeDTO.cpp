/**
 * Catapult REST API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.7.8
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.1-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "NodeTimeDTO.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

NodeTimeDTO::NodeTimeDTO()
{
}

NodeTimeDTO::~NodeTimeDTO()
{
}

void NodeTimeDTO::validate()
{
    // TODO: implement validation
}

web::json::value NodeTimeDTO::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("communicationTimestamps")] = ModelBase::toJson(m_CommunicationTimestamps);

    return val;
}

void NodeTimeDTO::fromJson(web::json::value& val)
{
    std::shared_ptr<CommunicationTimestamps> newCommunicationTimestamps(new CommunicationTimestamps());
    newCommunicationTimestamps->fromJson(val[utility::conversions::to_string_t("communicationTimestamps")]);
    setCommunicationTimestamps( newCommunicationTimestamps );
}

void NodeTimeDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    m_CommunicationTimestamps->toMultipart(multipart, utility::conversions::to_string_t("communicationTimestamps."));
}

void NodeTimeDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    std::shared_ptr<CommunicationTimestamps> newCommunicationTimestamps(new CommunicationTimestamps());
    newCommunicationTimestamps->fromMultiPart(multipart, utility::conversions::to_string_t("communicationTimestamps."));
    setCommunicationTimestamps( newCommunicationTimestamps );
}

std::shared_ptr<CommunicationTimestamps> NodeTimeDTO::getCommunicationTimestamps() const
{
    return m_CommunicationTimestamps;
}


void NodeTimeDTO::setCommunicationTimestamps(std::shared_ptr<CommunicationTimestamps> value)
{
    m_CommunicationTimestamps = value;
    
}
}
}
}
}

