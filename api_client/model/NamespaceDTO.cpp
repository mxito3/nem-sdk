/**
 * Catapult REST API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.7.8
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.1-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "NamespaceDTO.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

NamespaceDTO::NamespaceDTO()
{
    m_Type = 0;
    m_Depth = 0;
    m_Level1IsSet = false;
    m_Level2IsSet = false;
    m_Owner = utility::conversions::to_string_t("");
    m_OwnerAddress = utility::conversions::to_string_t("");
    m_OwnerAddressIsSet = false;
}

NamespaceDTO::~NamespaceDTO()
{
}

void NamespaceDTO::validate()
{
    // TODO: implement validation
}

web::json::value NamespaceDTO::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_Type);
    val[utility::conversions::to_string_t("depth")] = ModelBase::toJson(m_Depth);
    val[utility::conversions::to_string_t("level0")] = ModelBase::toJson(m_Level0);
    if(m_Level1IsSet)
    {
        val[utility::conversions::to_string_t("level1")] = ModelBase::toJson(m_Level1);
    }
    if(m_Level2IsSet)
    {
        val[utility::conversions::to_string_t("level2")] = ModelBase::toJson(m_Level2);
    }
    val[utility::conversions::to_string_t("parentId")] = ModelBase::toJson(m_ParentId);
    val[utility::conversions::to_string_t("owner")] = ModelBase::toJson(m_Owner);
    if(m_OwnerAddressIsSet)
    {
        val[utility::conversions::to_string_t("ownerAddress")] = ModelBase::toJson(m_OwnerAddress);
    }
    val[utility::conversions::to_string_t("startHeight")] = ModelBase::toJson(m_StartHeight);
    val[utility::conversions::to_string_t("endHeight")] = ModelBase::toJson(m_EndHeight);

    return val;
}

void NamespaceDTO::fromJson(web::json::value& val)
{
    setType(ModelBase::int32_tFromJson(val[utility::conversions::to_string_t("type")]));
    setDepth(ModelBase::int32_tFromJson(val[utility::conversions::to_string_t("depth")]));
    std::shared_ptr<UInt64DTO> newLevel0(new UInt64DTO());
    newLevel0->fromJson(val[utility::conversions::to_string_t("level0")]);
    setLevel0( newLevel0 );
    if(val.has_field(utility::conversions::to_string_t("level1")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("level1")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<UInt64DTO> newItem(new UInt64DTO());
            newItem->fromJson(fieldValue);
            setLevel1( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("level2")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("level2")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<UInt64DTO> newItem(new UInt64DTO());
            newItem->fromJson(fieldValue);
            setLevel2( newItem );
        }
    }
    std::shared_ptr<UInt64DTO> newParentId(new UInt64DTO());
    newParentId->fromJson(val[utility::conversions::to_string_t("parentId")]);
    setParentId( newParentId );
    setOwner(ModelBase::stringFromJson(val[utility::conversions::to_string_t("owner")]));
    if(val.has_field(utility::conversions::to_string_t("ownerAddress")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("ownerAddress")];
        if(!fieldValue.is_null())
        {
            setOwnerAddress(ModelBase::stringFromJson(fieldValue));
        }
    }
    std::shared_ptr<UInt64DTO> newStartHeight(new UInt64DTO());
    newStartHeight->fromJson(val[utility::conversions::to_string_t("startHeight")]);
    setStartHeight( newStartHeight );
    std::shared_ptr<UInt64DTO> newEndHeight(new UInt64DTO());
    newEndHeight->fromJson(val[utility::conversions::to_string_t("endHeight")]);
    setEndHeight( newEndHeight );
}

void NamespaceDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("depth"), m_Depth));
    m_Level0->toMultipart(multipart, utility::conversions::to_string_t("level0."));
    if(m_Level1IsSet)
    {
        if (m_Level1.get())
        {
            m_Level1->toMultipart(multipart, utility::conversions::to_string_t("level1."));
        }
        
    }
    if(m_Level2IsSet)
    {
        if (m_Level2.get())
        {
            m_Level2->toMultipart(multipart, utility::conversions::to_string_t("level2."));
        }
        
    }
    m_ParentId->toMultipart(multipart, utility::conversions::to_string_t("parentId."));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("owner"), m_Owner));
    if(m_OwnerAddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ownerAddress"), m_OwnerAddress));
        
    }
    m_StartHeight->toMultipart(multipart, utility::conversions::to_string_t("startHeight."));
    m_EndHeight->toMultipart(multipart, utility::conversions::to_string_t("endHeight."));
}

void NamespaceDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setType(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("type"))));
    setDepth(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("depth"))));
    std::shared_ptr<UInt64DTO> newLevel0(new UInt64DTO());
    newLevel0->fromMultiPart(multipart, utility::conversions::to_string_t("level0."));
    setLevel0( newLevel0 );
    if(multipart->hasContent(utility::conversions::to_string_t("level1")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("level1")))
        {
            std::shared_ptr<UInt64DTO> newItem(new UInt64DTO());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("level1."));
            setLevel1( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("level2")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("level2")))
        {
            std::shared_ptr<UInt64DTO> newItem(new UInt64DTO());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("level2."));
            setLevel2( newItem );
        }
    }
    std::shared_ptr<UInt64DTO> newParentId(new UInt64DTO());
    newParentId->fromMultiPart(multipart, utility::conversions::to_string_t("parentId."));
    setParentId( newParentId );
    setOwner(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("owner"))));
    if(multipart->hasContent(utility::conversions::to_string_t("ownerAddress")))
    {
        setOwnerAddress(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("ownerAddress"))));
    }
    std::shared_ptr<UInt64DTO> newStartHeight(new UInt64DTO());
    newStartHeight->fromMultiPart(multipart, utility::conversions::to_string_t("startHeight."));
    setStartHeight( newStartHeight );
    std::shared_ptr<UInt64DTO> newEndHeight(new UInt64DTO());
    newEndHeight->fromMultiPart(multipart, utility::conversions::to_string_t("endHeight."));
    setEndHeight( newEndHeight );
}

int32_t NamespaceDTO::getType() const
{
    return m_Type;
}


void NamespaceDTO::setType(int32_t value)
{
    m_Type = value;
    
}
int32_t NamespaceDTO::getDepth() const
{
    return m_Depth;
}


void NamespaceDTO::setDepth(int32_t value)
{
    m_Depth = value;
    
}
std::shared_ptr<UInt64DTO> NamespaceDTO::getLevel0() const
{
    return m_Level0;
}


void NamespaceDTO::setLevel0(std::shared_ptr<UInt64DTO> value)
{
    m_Level0 = value;
    
}
std::shared_ptr<UInt64DTO> NamespaceDTO::getLevel1() const
{
    return m_Level1;
}


void NamespaceDTO::setLevel1(std::shared_ptr<UInt64DTO> value)
{
    m_Level1 = value;
    m_Level1IsSet = true;
}
bool NamespaceDTO::level1IsSet() const
{
    return m_Level1IsSet;
}

void NamespaceDTO::unsetLevel1()
{
    m_Level1IsSet = false;
}

std::shared_ptr<UInt64DTO> NamespaceDTO::getLevel2() const
{
    return m_Level2;
}


void NamespaceDTO::setLevel2(std::shared_ptr<UInt64DTO> value)
{
    m_Level2 = value;
    m_Level2IsSet = true;
}
bool NamespaceDTO::level2IsSet() const
{
    return m_Level2IsSet;
}

void NamespaceDTO::unsetLevel2()
{
    m_Level2IsSet = false;
}

std::shared_ptr<UInt64DTO> NamespaceDTO::getParentId() const
{
    return m_ParentId;
}


void NamespaceDTO::setParentId(std::shared_ptr<UInt64DTO> value)
{
    m_ParentId = value;
    
}
utility::string_t NamespaceDTO::getOwner() const
{
    return m_Owner;
}


void NamespaceDTO::setOwner(utility::string_t value)
{
    m_Owner = value;
    
}
utility::string_t NamespaceDTO::getOwnerAddress() const
{
    return m_OwnerAddress;
}


void NamespaceDTO::setOwnerAddress(utility::string_t value)
{
    m_OwnerAddress = value;
    m_OwnerAddressIsSet = true;
}
bool NamespaceDTO::ownerAddressIsSet() const
{
    return m_OwnerAddressIsSet;
}

void NamespaceDTO::unsetOwnerAddress()
{
    m_OwnerAddressIsSet = false;
}

std::shared_ptr<UInt64DTO> NamespaceDTO::getStartHeight() const
{
    return m_StartHeight;
}


void NamespaceDTO::setStartHeight(std::shared_ptr<UInt64DTO> value)
{
    m_StartHeight = value;
    
}
std::shared_ptr<UInt64DTO> NamespaceDTO::getEndHeight() const
{
    return m_EndHeight;
}


void NamespaceDTO::setEndHeight(std::shared_ptr<UInt64DTO> value)
{
    m_EndHeight = value;
    
}
}
}
}
}

