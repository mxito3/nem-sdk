/**
 * Catapult REST API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.7.8
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.1-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "NodeInfoDTO.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

NodeInfoDTO::NodeInfoDTO()
{
    m_PublicKey = utility::conversions::to_string_t("");
    m_Port = 0;
    m_NetworkIdentifier = 0;
    m_Version = 0;
    m_Roles = 0;
    m_Host = utility::conversions::to_string_t("");
    m_FriendlyName = utility::conversions::to_string_t("");
}

NodeInfoDTO::~NodeInfoDTO()
{
}

void NodeInfoDTO::validate()
{
    // TODO: implement validation
}

web::json::value NodeInfoDTO::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("publicKey")] = ModelBase::toJson(m_PublicKey);
    val[utility::conversions::to_string_t("port")] = ModelBase::toJson(m_Port);
    val[utility::conversions::to_string_t("networkIdentifier")] = ModelBase::toJson(m_NetworkIdentifier);
    val[utility::conversions::to_string_t("version")] = ModelBase::toJson(m_Version);
    val[utility::conversions::to_string_t("roles")] = ModelBase::toJson(m_Roles);
    val[utility::conversions::to_string_t("host")] = ModelBase::toJson(m_Host);
    val[utility::conversions::to_string_t("friendlyName")] = ModelBase::toJson(m_FriendlyName);

    return val;
}

void NodeInfoDTO::fromJson(web::json::value& val)
{
    setPublicKey(ModelBase::stringFromJson(val[utility::conversions::to_string_t("publicKey")]));
    setPort(ModelBase::int32_tFromJson(val[utility::conversions::to_string_t("port")]));
    setNetworkIdentifier(ModelBase::int32_tFromJson(val[utility::conversions::to_string_t("networkIdentifier")]));
    setVersion(ModelBase::int32_tFromJson(val[utility::conversions::to_string_t("version")]));
    setRoles(ModelBase::int32_tFromJson(val[utility::conversions::to_string_t("roles")]));
    setHost(ModelBase::stringFromJson(val[utility::conversions::to_string_t("host")]));
    setFriendlyName(ModelBase::stringFromJson(val[utility::conversions::to_string_t("friendlyName")]));
}

void NodeInfoDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("publicKey"), m_PublicKey));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("port"), m_Port));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("networkIdentifier"), m_NetworkIdentifier));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("version"), m_Version));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("roles"), m_Roles));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("host"), m_Host));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("friendlyName"), m_FriendlyName));
}

void NodeInfoDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setPublicKey(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("publicKey"))));
    setPort(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("port"))));
    setNetworkIdentifier(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("networkIdentifier"))));
    setVersion(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("version"))));
    setRoles(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("roles"))));
    setHost(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("host"))));
    setFriendlyName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("friendlyName"))));
}

utility::string_t NodeInfoDTO::getPublicKey() const
{
    return m_PublicKey;
}


void NodeInfoDTO::setPublicKey(utility::string_t value)
{
    m_PublicKey = value;
    
}
int32_t NodeInfoDTO::getPort() const
{
    return m_Port;
}


void NodeInfoDTO::setPort(int32_t value)
{
    m_Port = value;
    
}
int32_t NodeInfoDTO::getNetworkIdentifier() const
{
    return m_NetworkIdentifier;
}


void NodeInfoDTO::setNetworkIdentifier(int32_t value)
{
    m_NetworkIdentifier = value;
    
}
int32_t NodeInfoDTO::getVersion() const
{
    return m_Version;
}


void NodeInfoDTO::setVersion(int32_t value)
{
    m_Version = value;
    
}
int32_t NodeInfoDTO::getRoles() const
{
    return m_Roles;
}


void NodeInfoDTO::setRoles(int32_t value)
{
    m_Roles = value;
    
}
utility::string_t NodeInfoDTO::getHost() const
{
    return m_Host;
}


void NodeInfoDTO::setHost(utility::string_t value)
{
    m_Host = value;
    
}
utility::string_t NodeInfoDTO::getFriendlyName() const
{
    return m_FriendlyName;
}


void NodeInfoDTO::setFriendlyName(utility::string_t value)
{
    m_FriendlyName = value;
    
}
}
}
}
}

