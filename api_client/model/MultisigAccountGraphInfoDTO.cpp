/**
 * Catapult REST API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.7.8
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.1-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "MultisigAccountGraphInfoDTO.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

MultisigAccountGraphInfoDTO::MultisigAccountGraphInfoDTO()
{
    m_Level = 0;
}

MultisigAccountGraphInfoDTO::~MultisigAccountGraphInfoDTO()
{
}

void MultisigAccountGraphInfoDTO::validate()
{
    // TODO: implement validation
}

web::json::value MultisigAccountGraphInfoDTO::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("level")] = ModelBase::toJson(m_Level);
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_MultisigEntries )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val[utility::conversions::to_string_t("multisigEntries")] = web::json::value::array(jsonArray);
    }

    return val;
}

void MultisigAccountGraphInfoDTO::fromJson(web::json::value& val)
{
    setLevel(ModelBase::int32_tFromJson(val[utility::conversions::to_string_t("level")]));
    {
        m_MultisigEntries.clear();
        std::vector<web::json::value> jsonArray;
        for( auto& item : val[utility::conversions::to_string_t("multisigEntries")].as_array() )
        {
            if(item.is_null())
            {
                m_MultisigEntries.push_back( std::shared_ptr<MultisigAccountInfoDTO>(nullptr) );
            }
            else
            {
                std::shared_ptr<MultisigAccountInfoDTO> newItem(new MultisigAccountInfoDTO());
                newItem->fromJson(item);
                m_MultisigEntries.push_back( newItem );
            }
        }
    }
}

void MultisigAccountGraphInfoDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("level"), m_Level));
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_MultisigEntries )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("multisigEntries"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
            }
}

void MultisigAccountGraphInfoDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setLevel(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("level"))));
    {
        m_MultisigEntries.clear();

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("multisigEntries"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_MultisigEntries.push_back( std::shared_ptr<MultisigAccountInfoDTO>(nullptr) );
            }
            else
            {
                std::shared_ptr<MultisigAccountInfoDTO> newItem(new MultisigAccountInfoDTO());
                newItem->fromJson(item);
                m_MultisigEntries.push_back( newItem );
            }
        }
    }
}

int32_t MultisigAccountGraphInfoDTO::getLevel() const
{
    return m_Level;
}


void MultisigAccountGraphInfoDTO::setLevel(int32_t value)
{
    m_Level = value;
    
}
std::vector<std::shared_ptr<MultisigAccountInfoDTO>>& MultisigAccountGraphInfoDTO::getMultisigEntries()
{
    return m_MultisigEntries;
}

void MultisigAccountGraphInfoDTO::setMultisigEntries(std::vector<std::shared_ptr<MultisigAccountInfoDTO>> value)
{
    m_MultisigEntries = value;
    
}
}
}
}
}

