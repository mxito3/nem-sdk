/**
 * Catapult REST API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.7.8
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.1-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * BlockchainRoutesApi.h
 *
 * 
 */

#ifndef IO_SWAGGER_CLIENT_API_BlockchainRoutesApi_H_
#define IO_SWAGGER_CLIENT_API_BlockchainRoutesApi_H_


#include "../ApiClient.h"

#include "BlockInfoDTO.h"
#include "BlockchainScoreDTO.h"
#include "BlockchainStorageInfoDTO.h"
#include "HeightDTO.h"
#include "Object.h"
#include <cpprest/details/basic_types.h>

#include <boost/optional.hpp>

namespace io {
namespace swagger {
namespace client {
namespace api {

using namespace io::swagger::client::model;

class  BlockchainRoutesApi
{
public:
    BlockchainRoutesApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~BlockchainRoutesApi();
    /// <summary>
    /// Get block information
    /// </summary>
    /// <remarks>
    /// Gets a block from the chain that has the given height.
    /// </remarks>
    /// <param name="height">The block&#39;s height.</param>
    pplx::task<std::shared_ptr<BlockInfoDTO>> getBlockByHeight(
        int64_t height
    );
    /// <summary>
    /// Get transactions from a block
    /// </summary>
    /// <remarks>
    /// Returns an array of transactions included in a block for a given block height.
    /// </remarks>
    /// <param name="height">The block&#39;s height.</param>
    /// <param name="pageSize">The number of transactions to return for each request. The default value is 10, the minimum is 10 and the maximum is 100. (optional)</param>
    /// <param name="id">The identifier of the transaction after which we want the transactions to be returned. If not supplied the most recent transactions are returned. (optional)</param>
    pplx::task<std::vector<std::shared_ptr<Object>>> getBlockTransactions(
        int64_t height,
        boost::optional<int32_t> pageSize,
        boost::optional<utility::string_t> id
    );
    /// <summary>
    /// Get the current height of the chain
    /// </summary>
    /// <remarks>
    /// Returns the current height of the block chain.
    /// </remarks>
    pplx::task<std::shared_ptr<HeightDTO>> getBlockchainHeight(
    );
    /// <summary>
    /// Get the current score of the chain
    /// </summary>
    /// <remarks>
    /// Gets the current score of the block chain. The higher the score, the better the chain. During synchronization, nodes try to get the best block chain in the network.
    /// </remarks>
    pplx::task<std::shared_ptr<BlockchainScoreDTO>> getBlockchainScore(
    );
    /// <summary>
    /// Get blocks information
    /// </summary>
    /// <remarks>
    /// Gets up to limit number of blocks after given block height from the chain.
    /// </remarks>
    /// <param name="height">The block&#39;s height.</param>
    /// <param name="limit">The number of following blocks to be returned.</param>
    pplx::task<std::vector<std::shared_ptr<BlockInfoDTO>>> getBlocksByHeightWithLimit(
        int64_t height,
        int32_t limit
    );
    /// <summary>
    /// Get the storage information
    /// </summary>
    /// <remarks>
    /// Returns statistical information about the blockchain.
    /// </remarks>
    pplx::task<std::shared_ptr<BlockchainStorageInfoDTO>> getDiagnosticStorage(
    );

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_API_BlockchainRoutesApi_H_ */

