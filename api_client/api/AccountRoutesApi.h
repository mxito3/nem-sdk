/**
 * Catapult REST API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.7.8
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.1-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * AccountRoutesApi.h
 *
 * 
 */

#ifndef IO_SWAGGER_CLIENT_API_AccountRoutesApi_H_
#define IO_SWAGGER_CLIENT_API_AccountRoutesApi_H_


#include "../ApiClient.h"

#include "AccountInfoDTO.h"
#include "Addresses.h"
#include "MultisigAccountGraphInfoDTO.h"
#include "MultisigAccountInfoDTO.h"
#include "Object.h"
#include <cpprest/details/basic_types.h>

#include <boost/optional.hpp>

namespace io {
namespace swagger {
namespace client {
namespace api {

using namespace io::swagger::client::model;

class  AccountRoutesApi
{
public:
    AccountRoutesApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~AccountRoutesApi();
    /// <summary>
    /// Get account information
    /// </summary>
    /// <remarks>
    /// Returns the account information.
    /// </remarks>
    /// <param name="accountId">The public key or address of the account.</param>
    pplx::task<std::shared_ptr<AccountInfoDTO>> getAccountInfo(
        utility::string_t accountId
    );
    /// <summary>
    /// Get multisig account information
    /// </summary>
    /// <remarks>
    /// Returns [multisig account](https://nemtech.github.io/concepts/multisig-account.html) information.
    /// </remarks>
    /// <param name="accountId">The public key or address of the account.</param>
    pplx::task<std::shared_ptr<MultisigAccountInfoDTO>> getAccountMultisig(
        utility::string_t accountId
    );
    /// <summary>
    /// Get multisig account graph information
    /// </summary>
    /// <remarks>
    /// Returns [multisig account](https://nemtech.github.io/concepts/multisig-account.html) graph.
    /// </remarks>
    /// <param name="accountId">The public key or address of the account.</param>
    pplx::task<std::vector<std::shared_ptr<MultisigAccountGraphInfoDTO>>> getAccountMultisigGraph(
        utility::string_t accountId
    );
    /// <summary>
    /// Get accounts information
    /// </summary>
    /// <remarks>
    /// Returns the account information for an array of accounts.
    /// </remarks>
    /// <param name="addresses">An array of addresses.</param>
    pplx::task<std::vector<std::shared_ptr<AccountInfoDTO>>> getAccountsInfo(
        std::shared_ptr<Addresses> addresses
    );
    /// <summary>
    /// Get incoming transactions
    /// </summary>
    /// <remarks>
    /// Gets an array of incoming transactions. A transaction is said to be incoming with respect to an account if the account is the recipient of the transaction.
    /// </remarks>
    /// <param name="publicKey">The public key of the account.</param>
    /// <param name="pageSize">The number of transactions to return for each request. The default value is 10, the minimum is 10 and the maximum is 100. (optional)</param>
    /// <param name="id">The identifier of the transaction after which we want the transactions to be returned. If not supplied the most recent transactions are returned. (optional)</param>
    pplx::task<std::vector<std::shared_ptr<Object>>> incomingTransactions(
        utility::string_t publicKey,
        boost::optional<int32_t> pageSize,
        boost::optional<utility::string_t> id
    );
    /// <summary>
    /// Get outgoing transactions
    /// </summary>
    /// <remarks>
    /// Gets an array of outgoing transactions. A transaction is said to be outgoing with respect to an account if the account is the sender of the transaction.
    /// </remarks>
    /// <param name="publicKey">The public key of the account.</param>
    /// <param name="pageSize">The number of transactions to return for each request. The default value is 10, the minimum is 10 and the maximum is 100. (optional)</param>
    /// <param name="id">The identifier of the transaction after which we want the transactions to be returned. If not supplied the most recent transactions are returned. (optional)</param>
    pplx::task<std::vector<std::shared_ptr<Object>>> outgoingTransactions(
        utility::string_t publicKey,
        boost::optional<int32_t> pageSize,
        boost::optional<utility::string_t> id
    );
    /// <summary>
    /// Get aggregate bonded transactions information
    /// </summary>
    /// <remarks>
    /// Gets an array of [aggregate bonded transactions](https://nemtech.github.io/concepts/aggregate-transaction.html#aggregate-bonded) where the account is the sender or requires to cosign the transaction.
    /// </remarks>
    /// <param name="publicKey">The public key of the account.</param>
    /// <param name="pageSize">The number of transactions to return for each request. The default value is 10, the minimum is 10 and the maximum is 100. (optional)</param>
    /// <param name="id">The identifier of the transaction after which we want the transactions to be returned. If not supplied the most recent transactions are returned. (optional)</param>
    pplx::task<std::vector<std::shared_ptr<Object>>> partialTransactions(
        utility::string_t publicKey,
        boost::optional<int32_t> pageSize,
        boost::optional<utility::string_t> id
    );
    /// <summary>
    /// Get confirmed transactions
    /// </summary>
    /// <remarks>
    /// Gets an array of transactions for which an account is the sender or receiver.
    /// </remarks>
    /// <param name="publicKey">The public key of the account.</param>
    /// <param name="pageSize">The number of transactions to return for each request. The default value is 10, the minimum is 10 and the maximum is 100. (optional)</param>
    /// <param name="id">The identifier of the transaction after which we want the transactions to be returned. If not supplied the most recent transactions are returned. (optional)</param>
    pplx::task<std::vector<std::shared_ptr<Object>>> transactions(
        utility::string_t publicKey,
        boost::optional<int32_t> pageSize,
        boost::optional<utility::string_t> id
    );
    /// <summary>
    /// Get unconfirmed transactions
    /// </summary>
    /// <remarks>
    /// Gets the array of transactions for which an account is the sender or receiver and which have not yet been included in a block.
    /// </remarks>
    /// <param name="publicKey">The public key of the account.</param>
    /// <param name="pageSize">The number of transactions to return for each request. The default value is 10, the minimum is 10 and the maximum is 100. (optional)</param>
    /// <param name="id">The identifier of the transaction after which we want the transactions to be returned. If not supplied the most recent transactions are returned. (optional)</param>
    pplx::task<std::vector<std::shared_ptr<Object>>> unconfirmedTransactions(
        utility::string_t publicKey,
        boost::optional<int32_t> pageSize,
        boost::optional<utility::string_t> id
    );

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_API_AccountRoutesApi_H_ */

