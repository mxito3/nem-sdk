// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCHEMATRANSFERTRANSACTION_CATAPULT_BUFFERS_H_
#define FLATBUFFERS_GENERATED_SCHEMATRANSFERTRANSACTION_CATAPULT_BUFFERS_H_

#include "flatbuffers/flatbuffers.h"

namespace Catapult {
namespace Buffers {

struct MessageBuffer;

struct MosaicBuffer;

struct TransferTransactionBuffer;

struct MessageBuffer FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_PAYLOAD = 6
  };
  uint8_t type() const {
    return GetField<uint8_t>(VT_TYPE, 0);
  }
  const flatbuffers::Vector<uint8_t> *payload() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_PAYLOAD);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_TYPE) &&
           VerifyOffset(verifier, VT_PAYLOAD) &&
           verifier.VerifyVector(payload()) &&
           verifier.EndTable();
  }
};

struct MessageBufferBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(uint8_t type) {
    fbb_.AddElement<uint8_t>(MessageBuffer::VT_TYPE, type, 0);
  }
  void add_payload(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> payload) {
    fbb_.AddOffset(MessageBuffer::VT_PAYLOAD, payload);
  }
  explicit MessageBufferBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MessageBufferBuilder &operator=(const MessageBufferBuilder &);
  flatbuffers::Offset<MessageBuffer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MessageBuffer>(end);
    return o;
  }
};

inline flatbuffers::Offset<MessageBuffer> CreateMessageBuffer(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t type = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> payload = 0) {
  MessageBufferBuilder builder_(_fbb);
  builder_.add_payload(payload);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<MessageBuffer> CreateMessageBufferDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t type = 0,
    const std::vector<uint8_t> *payload = nullptr) {
  auto payload__ = payload ? _fbb.CreateVector<uint8_t>(*payload) : 0;
  return Catapult::Buffers::CreateMessageBuffer(
      _fbb,
      type,
      payload__);
}

struct MosaicBuffer FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_AMOUNT = 6
  };
  const flatbuffers::Vector<uint32_t> *id() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_ID);
  }
  const flatbuffers::Vector<uint32_t> *amount() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_AMOUNT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyVector(id()) &&
           VerifyOffset(verifier, VT_AMOUNT) &&
           verifier.VerifyVector(amount()) &&
           verifier.EndTable();
  }
};

struct MosaicBufferBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> id) {
    fbb_.AddOffset(MosaicBuffer::VT_ID, id);
  }
  void add_amount(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> amount) {
    fbb_.AddOffset(MosaicBuffer::VT_AMOUNT, amount);
  }
  explicit MosaicBufferBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MosaicBufferBuilder &operator=(const MosaicBufferBuilder &);
  flatbuffers::Offset<MosaicBuffer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MosaicBuffer>(end);
    return o;
  }
};

inline flatbuffers::Offset<MosaicBuffer> CreateMosaicBuffer(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> id = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> amount = 0) {
  MosaicBufferBuilder builder_(_fbb);
  builder_.add_amount(amount);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<MosaicBuffer> CreateMosaicBufferDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint32_t> *id = nullptr,
    const std::vector<uint32_t> *amount = nullptr) {
  auto id__ = id ? _fbb.CreateVector<uint32_t>(*id) : 0;
  auto amount__ = amount ? _fbb.CreateVector<uint32_t>(*amount) : 0;
  return Catapult::Buffers::CreateMosaicBuffer(
      _fbb,
      id__,
      amount__);
}

struct TransferTransactionBuffer FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SIZE = 4,
    VT_SIGNATURE = 6,
    VT_SIGNER = 8,
    VT_VERSION = 10,
    VT_TYPE = 12,
    VT_FEE = 14,
    VT_DEADLINE = 16,
    VT_RECIPIENT = 18,
    VT_MESSAGESIZE = 20,
    VT_NUMMOSAICS = 22,
    VT_MESSAGE = 24,
    VT_MOSAICS = 26
  };
  uint32_t size() const {
    return GetField<uint32_t>(VT_SIZE, 0);
  }
  const flatbuffers::Vector<uint8_t> *signature() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_SIGNATURE);
  }
  const flatbuffers::Vector<uint8_t> *signer() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_SIGNER);
  }
  uint16_t version() const {
    return GetField<uint16_t>(VT_VERSION, 0);
  }
  uint16_t type() const {
    return GetField<uint16_t>(VT_TYPE, 0);
  }
  const flatbuffers::Vector<uint32_t> *fee() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_FEE);
  }
  const flatbuffers::Vector<uint32_t> *deadline() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_DEADLINE);
  }
  const flatbuffers::Vector<uint8_t> *recipient() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_RECIPIENT);
  }
  uint16_t messageSize() const {
    return GetField<uint16_t>(VT_MESSAGESIZE, 0);
  }
  uint8_t numMosaics() const {
    return GetField<uint8_t>(VT_NUMMOSAICS, 0);
  }
  const MessageBuffer *message() const {
    return GetPointer<const MessageBuffer *>(VT_MESSAGE);
  }
  const flatbuffers::Vector<flatbuffers::Offset<MosaicBuffer>> *mosaics() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<MosaicBuffer>> *>(VT_MOSAICS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_SIZE) &&
           VerifyOffset(verifier, VT_SIGNATURE) &&
           verifier.VerifyVector(signature()) &&
           VerifyOffset(verifier, VT_SIGNER) &&
           verifier.VerifyVector(signer()) &&
           VerifyField<uint16_t>(verifier, VT_VERSION) &&
           VerifyField<uint16_t>(verifier, VT_TYPE) &&
           VerifyOffset(verifier, VT_FEE) &&
           verifier.VerifyVector(fee()) &&
           VerifyOffset(verifier, VT_DEADLINE) &&
           verifier.VerifyVector(deadline()) &&
           VerifyOffset(verifier, VT_RECIPIENT) &&
           verifier.VerifyVector(recipient()) &&
           VerifyField<uint16_t>(verifier, VT_MESSAGESIZE) &&
           VerifyField<uint8_t>(verifier, VT_NUMMOSAICS) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyTable(message()) &&
           VerifyOffset(verifier, VT_MOSAICS) &&
           verifier.VerifyVector(mosaics()) &&
           verifier.VerifyVectorOfTables(mosaics()) &&
           verifier.EndTable();
  }
};

struct TransferTransactionBufferBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_size(uint32_t size) {
    fbb_.AddElement<uint32_t>(TransferTransactionBuffer::VT_SIZE, size, 0);
  }
  void add_signature(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> signature) {
    fbb_.AddOffset(TransferTransactionBuffer::VT_SIGNATURE, signature);
  }
  void add_signer(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> signer) {
    fbb_.AddOffset(TransferTransactionBuffer::VT_SIGNER, signer);
  }
  void add_version(uint16_t version) {
    fbb_.AddElement<uint16_t>(TransferTransactionBuffer::VT_VERSION, version, 0);
  }
  void add_type(uint16_t type) {
    fbb_.AddElement<uint16_t>(TransferTransactionBuffer::VT_TYPE, type, 0);
  }
  void add_fee(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> fee) {
    fbb_.AddOffset(TransferTransactionBuffer::VT_FEE, fee);
  }
  void add_deadline(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> deadline) {
    fbb_.AddOffset(TransferTransactionBuffer::VT_DEADLINE, deadline);
  }
  void add_recipient(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> recipient) {
    fbb_.AddOffset(TransferTransactionBuffer::VT_RECIPIENT, recipient);
  }
  void add_messageSize(uint16_t messageSize) {
    fbb_.AddElement<uint16_t>(TransferTransactionBuffer::VT_MESSAGESIZE, messageSize, 0);
  }
  void add_numMosaics(uint8_t numMosaics) {
    fbb_.AddElement<uint8_t>(TransferTransactionBuffer::VT_NUMMOSAICS, numMosaics, 0);
  }
  void add_message(flatbuffers::Offset<MessageBuffer> message) {
    fbb_.AddOffset(TransferTransactionBuffer::VT_MESSAGE, message);
  }
  void add_mosaics(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<MosaicBuffer>>> mosaics) {
    fbb_.AddOffset(TransferTransactionBuffer::VT_MOSAICS, mosaics);
  }
  explicit TransferTransactionBufferBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TransferTransactionBufferBuilder &operator=(const TransferTransactionBufferBuilder &);
  flatbuffers::Offset<TransferTransactionBuffer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TransferTransactionBuffer>(end);
    return o;
  }
};

inline flatbuffers::Offset<TransferTransactionBuffer> CreateTransferTransactionBuffer(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t size = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> signature = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> signer = 0,
    uint16_t version = 0,
    uint16_t type = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> fee = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> deadline = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> recipient = 0,
    uint16_t messageSize = 0,
    uint8_t numMosaics = 0,
    flatbuffers::Offset<MessageBuffer> message = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<MosaicBuffer>>> mosaics = 0) {
  TransferTransactionBufferBuilder builder_(_fbb);
  builder_.add_mosaics(mosaics);
  builder_.add_message(message);
  builder_.add_recipient(recipient);
  builder_.add_deadline(deadline);
  builder_.add_fee(fee);
  builder_.add_signer(signer);
  builder_.add_signature(signature);
  builder_.add_size(size);
  builder_.add_messageSize(messageSize);
  builder_.add_type(type);
  builder_.add_version(version);
  builder_.add_numMosaics(numMosaics);
  return builder_.Finish();
}

inline flatbuffers::Offset<TransferTransactionBuffer> CreateTransferTransactionBufferDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t size = 0,
    const std::vector<uint8_t> *signature = nullptr,
    const std::vector<uint8_t> *signer = nullptr,
    uint16_t version = 0,
    uint16_t type = 0,
    const std::vector<uint32_t> *fee = nullptr,
    const std::vector<uint32_t> *deadline = nullptr,
    const std::vector<uint8_t> *recipient = nullptr,
    uint16_t messageSize = 0,
    uint8_t numMosaics = 0,
    flatbuffers::Offset<MessageBuffer> message = 0,
    const std::vector<flatbuffers::Offset<MosaicBuffer>> *mosaics = nullptr) {
  auto signature__ = signature ? _fbb.CreateVector<uint8_t>(*signature) : 0;
  auto signer__ = signer ? _fbb.CreateVector<uint8_t>(*signer) : 0;
  auto fee__ = fee ? _fbb.CreateVector<uint32_t>(*fee) : 0;
  auto deadline__ = deadline ? _fbb.CreateVector<uint32_t>(*deadline) : 0;
  auto recipient__ = recipient ? _fbb.CreateVector<uint8_t>(*recipient) : 0;
  auto mosaics__ = mosaics ? _fbb.CreateVector<flatbuffers::Offset<MosaicBuffer>>(*mosaics) : 0;
  return Catapult::Buffers::CreateTransferTransactionBuffer(
      _fbb,
      size,
      signature__,
      signer__,
      version,
      type,
      fee__,
      deadline__,
      recipient__,
      messageSize,
      numMosaics,
      message,
      mosaics__);
}

inline const Catapult::Buffers::TransferTransactionBuffer *GetTransferTransactionBuffer(const void *buf) {
  return flatbuffers::GetRoot<Catapult::Buffers::TransferTransactionBuffer>(buf);
}

inline const Catapult::Buffers::TransferTransactionBuffer *GetSizePrefixedTransferTransactionBuffer(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Catapult::Buffers::TransferTransactionBuffer>(buf);
}

inline bool VerifyTransferTransactionBufferBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Catapult::Buffers::TransferTransactionBuffer>(nullptr);
}

inline bool VerifySizePrefixedTransferTransactionBufferBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Catapult::Buffers::TransferTransactionBuffer>(nullptr);
}

inline void FinishTransferTransactionBufferBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Catapult::Buffers::TransferTransactionBuffer> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTransferTransactionBufferBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Catapult::Buffers::TransferTransactionBuffer> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Buffers
}  // namespace Catapult

#endif  // FLATBUFFERS_GENERATED_SCHEMATRANSFERTRANSACTION_CATAPULT_BUFFERS_H_
