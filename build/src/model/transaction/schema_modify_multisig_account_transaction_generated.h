// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCHEMAMODIFYMULTISIGACCOUNTTRANSACTION_CATAPULT_BUFFERS_H_
#define FLATBUFFERS_GENERATED_SCHEMAMODIFYMULTISIGACCOUNTTRANSACTION_CATAPULT_BUFFERS_H_

#include "flatbuffers/flatbuffers.h"

namespace Catapult {
namespace Buffers {

struct CosignatoryModificationBuffer;

struct ModifyMultisigAccountTransactionBuffer;

struct CosignatoryModificationBuffer FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_COSIGNATORYPUBLICKEY = 6
  };
  uint8_t type() const {
    return GetField<uint8_t>(VT_TYPE, 0);
  }
  const flatbuffers::Vector<uint8_t> *cosignatoryPublicKey() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_COSIGNATORYPUBLICKEY);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_TYPE) &&
           VerifyOffset(verifier, VT_COSIGNATORYPUBLICKEY) &&
           verifier.VerifyVector(cosignatoryPublicKey()) &&
           verifier.EndTable();
  }
};

struct CosignatoryModificationBufferBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(uint8_t type) {
    fbb_.AddElement<uint8_t>(CosignatoryModificationBuffer::VT_TYPE, type, 0);
  }
  void add_cosignatoryPublicKey(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> cosignatoryPublicKey) {
    fbb_.AddOffset(CosignatoryModificationBuffer::VT_COSIGNATORYPUBLICKEY, cosignatoryPublicKey);
  }
  explicit CosignatoryModificationBufferBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CosignatoryModificationBufferBuilder &operator=(const CosignatoryModificationBufferBuilder &);
  flatbuffers::Offset<CosignatoryModificationBuffer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CosignatoryModificationBuffer>(end);
    return o;
  }
};

inline flatbuffers::Offset<CosignatoryModificationBuffer> CreateCosignatoryModificationBuffer(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t type = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> cosignatoryPublicKey = 0) {
  CosignatoryModificationBufferBuilder builder_(_fbb);
  builder_.add_cosignatoryPublicKey(cosignatoryPublicKey);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<CosignatoryModificationBuffer> CreateCosignatoryModificationBufferDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t type = 0,
    const std::vector<uint8_t> *cosignatoryPublicKey = nullptr) {
  auto cosignatoryPublicKey__ = cosignatoryPublicKey ? _fbb.CreateVector<uint8_t>(*cosignatoryPublicKey) : 0;
  return Catapult::Buffers::CreateCosignatoryModificationBuffer(
      _fbb,
      type,
      cosignatoryPublicKey__);
}

struct ModifyMultisigAccountTransactionBuffer FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SIZE = 4,
    VT_SIGNATURE = 6,
    VT_SIGNER = 8,
    VT_VERSION = 10,
    VT_TYPE = 12,
    VT_FEE = 14,
    VT_DEADLINE = 16,
    VT_MINREMOVALDELTA = 18,
    VT_MINAPPROVALDELTA = 20,
    VT_NUMMODIFICATIONS = 22,
    VT_MODIFICATIONS = 24
  };
  uint32_t size() const {
    return GetField<uint32_t>(VT_SIZE, 0);
  }
  const flatbuffers::Vector<uint8_t> *signature() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_SIGNATURE);
  }
  const flatbuffers::Vector<uint8_t> *signer() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_SIGNER);
  }
  uint16_t version() const {
    return GetField<uint16_t>(VT_VERSION, 0);
  }
  uint16_t type() const {
    return GetField<uint16_t>(VT_TYPE, 0);
  }
  const flatbuffers::Vector<uint32_t> *fee() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_FEE);
  }
  const flatbuffers::Vector<uint32_t> *deadline() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_DEADLINE);
  }
  uint8_t minRemovalDelta() const {
    return GetField<uint8_t>(VT_MINREMOVALDELTA, 0);
  }
  uint8_t minApprovalDelta() const {
    return GetField<uint8_t>(VT_MINAPPROVALDELTA, 0);
  }
  uint8_t numModifications() const {
    return GetField<uint8_t>(VT_NUMMODIFICATIONS, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<CosignatoryModificationBuffer>> *modifications() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<CosignatoryModificationBuffer>> *>(VT_MODIFICATIONS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_SIZE) &&
           VerifyOffset(verifier, VT_SIGNATURE) &&
           verifier.VerifyVector(signature()) &&
           VerifyOffset(verifier, VT_SIGNER) &&
           verifier.VerifyVector(signer()) &&
           VerifyField<uint16_t>(verifier, VT_VERSION) &&
           VerifyField<uint16_t>(verifier, VT_TYPE) &&
           VerifyOffset(verifier, VT_FEE) &&
           verifier.VerifyVector(fee()) &&
           VerifyOffset(verifier, VT_DEADLINE) &&
           verifier.VerifyVector(deadline()) &&
           VerifyField<uint8_t>(verifier, VT_MINREMOVALDELTA) &&
           VerifyField<uint8_t>(verifier, VT_MINAPPROVALDELTA) &&
           VerifyField<uint8_t>(verifier, VT_NUMMODIFICATIONS) &&
           VerifyOffset(verifier, VT_MODIFICATIONS) &&
           verifier.VerifyVector(modifications()) &&
           verifier.VerifyVectorOfTables(modifications()) &&
           verifier.EndTable();
  }
};

struct ModifyMultisigAccountTransactionBufferBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_size(uint32_t size) {
    fbb_.AddElement<uint32_t>(ModifyMultisigAccountTransactionBuffer::VT_SIZE, size, 0);
  }
  void add_signature(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> signature) {
    fbb_.AddOffset(ModifyMultisigAccountTransactionBuffer::VT_SIGNATURE, signature);
  }
  void add_signer(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> signer) {
    fbb_.AddOffset(ModifyMultisigAccountTransactionBuffer::VT_SIGNER, signer);
  }
  void add_version(uint16_t version) {
    fbb_.AddElement<uint16_t>(ModifyMultisigAccountTransactionBuffer::VT_VERSION, version, 0);
  }
  void add_type(uint16_t type) {
    fbb_.AddElement<uint16_t>(ModifyMultisigAccountTransactionBuffer::VT_TYPE, type, 0);
  }
  void add_fee(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> fee) {
    fbb_.AddOffset(ModifyMultisigAccountTransactionBuffer::VT_FEE, fee);
  }
  void add_deadline(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> deadline) {
    fbb_.AddOffset(ModifyMultisigAccountTransactionBuffer::VT_DEADLINE, deadline);
  }
  void add_minRemovalDelta(uint8_t minRemovalDelta) {
    fbb_.AddElement<uint8_t>(ModifyMultisigAccountTransactionBuffer::VT_MINREMOVALDELTA, minRemovalDelta, 0);
  }
  void add_minApprovalDelta(uint8_t minApprovalDelta) {
    fbb_.AddElement<uint8_t>(ModifyMultisigAccountTransactionBuffer::VT_MINAPPROVALDELTA, minApprovalDelta, 0);
  }
  void add_numModifications(uint8_t numModifications) {
    fbb_.AddElement<uint8_t>(ModifyMultisigAccountTransactionBuffer::VT_NUMMODIFICATIONS, numModifications, 0);
  }
  void add_modifications(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<CosignatoryModificationBuffer>>> modifications) {
    fbb_.AddOffset(ModifyMultisigAccountTransactionBuffer::VT_MODIFICATIONS, modifications);
  }
  explicit ModifyMultisigAccountTransactionBufferBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ModifyMultisigAccountTransactionBufferBuilder &operator=(const ModifyMultisigAccountTransactionBufferBuilder &);
  flatbuffers::Offset<ModifyMultisigAccountTransactionBuffer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ModifyMultisigAccountTransactionBuffer>(end);
    return o;
  }
};

inline flatbuffers::Offset<ModifyMultisigAccountTransactionBuffer> CreateModifyMultisigAccountTransactionBuffer(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t size = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> signature = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> signer = 0,
    uint16_t version = 0,
    uint16_t type = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> fee = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> deadline = 0,
    uint8_t minRemovalDelta = 0,
    uint8_t minApprovalDelta = 0,
    uint8_t numModifications = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<CosignatoryModificationBuffer>>> modifications = 0) {
  ModifyMultisigAccountTransactionBufferBuilder builder_(_fbb);
  builder_.add_modifications(modifications);
  builder_.add_deadline(deadline);
  builder_.add_fee(fee);
  builder_.add_signer(signer);
  builder_.add_signature(signature);
  builder_.add_size(size);
  builder_.add_type(type);
  builder_.add_version(version);
  builder_.add_numModifications(numModifications);
  builder_.add_minApprovalDelta(minApprovalDelta);
  builder_.add_minRemovalDelta(minRemovalDelta);
  return builder_.Finish();
}

inline flatbuffers::Offset<ModifyMultisigAccountTransactionBuffer> CreateModifyMultisigAccountTransactionBufferDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t size = 0,
    const std::vector<uint8_t> *signature = nullptr,
    const std::vector<uint8_t> *signer = nullptr,
    uint16_t version = 0,
    uint16_t type = 0,
    const std::vector<uint32_t> *fee = nullptr,
    const std::vector<uint32_t> *deadline = nullptr,
    uint8_t minRemovalDelta = 0,
    uint8_t minApprovalDelta = 0,
    uint8_t numModifications = 0,
    const std::vector<flatbuffers::Offset<CosignatoryModificationBuffer>> *modifications = nullptr) {
  auto signature__ = signature ? _fbb.CreateVector<uint8_t>(*signature) : 0;
  auto signer__ = signer ? _fbb.CreateVector<uint8_t>(*signer) : 0;
  auto fee__ = fee ? _fbb.CreateVector<uint32_t>(*fee) : 0;
  auto deadline__ = deadline ? _fbb.CreateVector<uint32_t>(*deadline) : 0;
  auto modifications__ = modifications ? _fbb.CreateVector<flatbuffers::Offset<CosignatoryModificationBuffer>>(*modifications) : 0;
  return Catapult::Buffers::CreateModifyMultisigAccountTransactionBuffer(
      _fbb,
      size,
      signature__,
      signer__,
      version,
      type,
      fee__,
      deadline__,
      minRemovalDelta,
      minApprovalDelta,
      numModifications,
      modifications__);
}

inline const Catapult::Buffers::ModifyMultisigAccountTransactionBuffer *GetModifyMultisigAccountTransactionBuffer(const void *buf) {
  return flatbuffers::GetRoot<Catapult::Buffers::ModifyMultisigAccountTransactionBuffer>(buf);
}

inline const Catapult::Buffers::ModifyMultisigAccountTransactionBuffer *GetSizePrefixedModifyMultisigAccountTransactionBuffer(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Catapult::Buffers::ModifyMultisigAccountTransactionBuffer>(buf);
}

inline bool VerifyModifyMultisigAccountTransactionBufferBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Catapult::Buffers::ModifyMultisigAccountTransactionBuffer>(nullptr);
}

inline bool VerifySizePrefixedModifyMultisigAccountTransactionBufferBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Catapult::Buffers::ModifyMultisigAccountTransactionBuffer>(nullptr);
}

inline void FinishModifyMultisigAccountTransactionBufferBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Catapult::Buffers::ModifyMultisigAccountTransactionBuffer> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedModifyMultisigAccountTransactionBufferBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Catapult::Buffers::ModifyMultisigAccountTransactionBuffer> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Buffers
}  // namespace Catapult

#endif  // FLATBUFFERS_GENERATED_SCHEMAMODIFYMULTISIGACCOUNTTRANSACTION_CATAPULT_BUFFERS_H_
