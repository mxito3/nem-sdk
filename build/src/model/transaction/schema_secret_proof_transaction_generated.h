// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCHEMASECRETPROOFTRANSACTION_CATAPULT_BUFFERS_H_
#define FLATBUFFERS_GENERATED_SCHEMASECRETPROOFTRANSACTION_CATAPULT_BUFFERS_H_

#include "flatbuffers/flatbuffers.h"

namespace Catapult {
namespace Buffers {

struct SecretProofTransactionBuffer;

struct SecretProofTransactionBuffer FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SIZE = 4,
    VT_SIGNATURE = 6,
    VT_SIGNER = 8,
    VT_VERSION = 10,
    VT_TYPE = 12,
    VT_FEE = 14,
    VT_DEADLINE = 16,
    VT_HASHALGORITHM = 18,
    VT_SECRET = 20,
    VT_PROOFSIZE = 22,
    VT_PROOF = 24
  };
  uint32_t size() const {
    return GetField<uint32_t>(VT_SIZE, 0);
  }
  const flatbuffers::Vector<uint8_t> *signature() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_SIGNATURE);
  }
  const flatbuffers::Vector<uint8_t> *signer() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_SIGNER);
  }
  uint16_t version() const {
    return GetField<uint16_t>(VT_VERSION, 0);
  }
  uint16_t type() const {
    return GetField<uint16_t>(VT_TYPE, 0);
  }
  const flatbuffers::Vector<uint32_t> *fee() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_FEE);
  }
  const flatbuffers::Vector<uint32_t> *deadline() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_DEADLINE);
  }
  uint8_t hashAlgorithm() const {
    return GetField<uint8_t>(VT_HASHALGORITHM, 0);
  }
  const flatbuffers::Vector<uint8_t> *secret() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_SECRET);
  }
  uint16_t proofSize() const {
    return GetField<uint16_t>(VT_PROOFSIZE, 0);
  }
  const flatbuffers::Vector<uint8_t> *proof() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_PROOF);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_SIZE) &&
           VerifyOffset(verifier, VT_SIGNATURE) &&
           verifier.VerifyVector(signature()) &&
           VerifyOffset(verifier, VT_SIGNER) &&
           verifier.VerifyVector(signer()) &&
           VerifyField<uint16_t>(verifier, VT_VERSION) &&
           VerifyField<uint16_t>(verifier, VT_TYPE) &&
           VerifyOffset(verifier, VT_FEE) &&
           verifier.VerifyVector(fee()) &&
           VerifyOffset(verifier, VT_DEADLINE) &&
           verifier.VerifyVector(deadline()) &&
           VerifyField<uint8_t>(verifier, VT_HASHALGORITHM) &&
           VerifyOffset(verifier, VT_SECRET) &&
           verifier.VerifyVector(secret()) &&
           VerifyField<uint16_t>(verifier, VT_PROOFSIZE) &&
           VerifyOffset(verifier, VT_PROOF) &&
           verifier.VerifyVector(proof()) &&
           verifier.EndTable();
  }
};

struct SecretProofTransactionBufferBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_size(uint32_t size) {
    fbb_.AddElement<uint32_t>(SecretProofTransactionBuffer::VT_SIZE, size, 0);
  }
  void add_signature(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> signature) {
    fbb_.AddOffset(SecretProofTransactionBuffer::VT_SIGNATURE, signature);
  }
  void add_signer(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> signer) {
    fbb_.AddOffset(SecretProofTransactionBuffer::VT_SIGNER, signer);
  }
  void add_version(uint16_t version) {
    fbb_.AddElement<uint16_t>(SecretProofTransactionBuffer::VT_VERSION, version, 0);
  }
  void add_type(uint16_t type) {
    fbb_.AddElement<uint16_t>(SecretProofTransactionBuffer::VT_TYPE, type, 0);
  }
  void add_fee(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> fee) {
    fbb_.AddOffset(SecretProofTransactionBuffer::VT_FEE, fee);
  }
  void add_deadline(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> deadline) {
    fbb_.AddOffset(SecretProofTransactionBuffer::VT_DEADLINE, deadline);
  }
  void add_hashAlgorithm(uint8_t hashAlgorithm) {
    fbb_.AddElement<uint8_t>(SecretProofTransactionBuffer::VT_HASHALGORITHM, hashAlgorithm, 0);
  }
  void add_secret(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> secret) {
    fbb_.AddOffset(SecretProofTransactionBuffer::VT_SECRET, secret);
  }
  void add_proofSize(uint16_t proofSize) {
    fbb_.AddElement<uint16_t>(SecretProofTransactionBuffer::VT_PROOFSIZE, proofSize, 0);
  }
  void add_proof(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> proof) {
    fbb_.AddOffset(SecretProofTransactionBuffer::VT_PROOF, proof);
  }
  explicit SecretProofTransactionBufferBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SecretProofTransactionBufferBuilder &operator=(const SecretProofTransactionBufferBuilder &);
  flatbuffers::Offset<SecretProofTransactionBuffer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SecretProofTransactionBuffer>(end);
    return o;
  }
};

inline flatbuffers::Offset<SecretProofTransactionBuffer> CreateSecretProofTransactionBuffer(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t size = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> signature = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> signer = 0,
    uint16_t version = 0,
    uint16_t type = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> fee = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> deadline = 0,
    uint8_t hashAlgorithm = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> secret = 0,
    uint16_t proofSize = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> proof = 0) {
  SecretProofTransactionBufferBuilder builder_(_fbb);
  builder_.add_proof(proof);
  builder_.add_secret(secret);
  builder_.add_deadline(deadline);
  builder_.add_fee(fee);
  builder_.add_signer(signer);
  builder_.add_signature(signature);
  builder_.add_size(size);
  builder_.add_proofSize(proofSize);
  builder_.add_type(type);
  builder_.add_version(version);
  builder_.add_hashAlgorithm(hashAlgorithm);
  return builder_.Finish();
}

inline flatbuffers::Offset<SecretProofTransactionBuffer> CreateSecretProofTransactionBufferDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t size = 0,
    const std::vector<uint8_t> *signature = nullptr,
    const std::vector<uint8_t> *signer = nullptr,
    uint16_t version = 0,
    uint16_t type = 0,
    const std::vector<uint32_t> *fee = nullptr,
    const std::vector<uint32_t> *deadline = nullptr,
    uint8_t hashAlgorithm = 0,
    const std::vector<uint8_t> *secret = nullptr,
    uint16_t proofSize = 0,
    const std::vector<uint8_t> *proof = nullptr) {
  auto signature__ = signature ? _fbb.CreateVector<uint8_t>(*signature) : 0;
  auto signer__ = signer ? _fbb.CreateVector<uint8_t>(*signer) : 0;
  auto fee__ = fee ? _fbb.CreateVector<uint32_t>(*fee) : 0;
  auto deadline__ = deadline ? _fbb.CreateVector<uint32_t>(*deadline) : 0;
  auto secret__ = secret ? _fbb.CreateVector<uint8_t>(*secret) : 0;
  auto proof__ = proof ? _fbb.CreateVector<uint8_t>(*proof) : 0;
  return Catapult::Buffers::CreateSecretProofTransactionBuffer(
      _fbb,
      size,
      signature__,
      signer__,
      version,
      type,
      fee__,
      deadline__,
      hashAlgorithm,
      secret__,
      proofSize,
      proof__);
}

inline const Catapult::Buffers::SecretProofTransactionBuffer *GetSecretProofTransactionBuffer(const void *buf) {
  return flatbuffers::GetRoot<Catapult::Buffers::SecretProofTransactionBuffer>(buf);
}

inline const Catapult::Buffers::SecretProofTransactionBuffer *GetSizePrefixedSecretProofTransactionBuffer(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Catapult::Buffers::SecretProofTransactionBuffer>(buf);
}

inline bool VerifySecretProofTransactionBufferBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Catapult::Buffers::SecretProofTransactionBuffer>(nullptr);
}

inline bool VerifySizePrefixedSecretProofTransactionBufferBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Catapult::Buffers::SecretProofTransactionBuffer>(nullptr);
}

inline void FinishSecretProofTransactionBufferBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Catapult::Buffers::SecretProofTransactionBuffer> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSecretProofTransactionBufferBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Catapult::Buffers::SecretProofTransactionBuffer> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Buffers
}  // namespace Catapult

#endif  // FLATBUFFERS_GENERATED_SCHEMASECRETPROOFTRANSACTION_CATAPULT_BUFFERS_H_
