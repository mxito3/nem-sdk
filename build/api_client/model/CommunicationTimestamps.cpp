/**
 * Catapult REST API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.7.8
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.1-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "CommunicationTimestamps.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

CommunicationTimestamps::CommunicationTimestamps()
{
    m_SendTimestampIsSet = false;
    m_ReceiveTimestampIsSet = false;
}

CommunicationTimestamps::~CommunicationTimestamps()
{
}

void CommunicationTimestamps::validate()
{
    // TODO: implement validation
}

web::json::value CommunicationTimestamps::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_SendTimestampIsSet)
    {
        val[utility::conversions::to_string_t("sendTimestamp")] = ModelBase::toJson(m_SendTimestamp);
    }
    if(m_ReceiveTimestampIsSet)
    {
        val[utility::conversions::to_string_t("receiveTimestamp")] = ModelBase::toJson(m_ReceiveTimestamp);
    }

    return val;
}

void CommunicationTimestamps::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("sendTimestamp")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("sendTimestamp")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<UInt64DTO> newItem(new UInt64DTO());
            newItem->fromJson(fieldValue);
            setSendTimestamp( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("receiveTimestamp")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("receiveTimestamp")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<UInt64DTO> newItem(new UInt64DTO());
            newItem->fromJson(fieldValue);
            setReceiveTimestamp( newItem );
        }
    }
}

void CommunicationTimestamps::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_SendTimestampIsSet)
    {
        if (m_SendTimestamp.get())
        {
            m_SendTimestamp->toMultipart(multipart, utility::conversions::to_string_t("sendTimestamp."));
        }
        
    }
    if(m_ReceiveTimestampIsSet)
    {
        if (m_ReceiveTimestamp.get())
        {
            m_ReceiveTimestamp->toMultipart(multipart, utility::conversions::to_string_t("receiveTimestamp."));
        }
        
    }
}

void CommunicationTimestamps::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("sendTimestamp")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("sendTimestamp")))
        {
            std::shared_ptr<UInt64DTO> newItem(new UInt64DTO());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("sendTimestamp."));
            setSendTimestamp( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("receiveTimestamp")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("receiveTimestamp")))
        {
            std::shared_ptr<UInt64DTO> newItem(new UInt64DTO());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("receiveTimestamp."));
            setReceiveTimestamp( newItem );
        }
    }
}

std::shared_ptr<UInt64DTO> CommunicationTimestamps::getSendTimestamp() const
{
    return m_SendTimestamp;
}


void CommunicationTimestamps::setSendTimestamp(std::shared_ptr<UInt64DTO> value)
{
    m_SendTimestamp = value;
    m_SendTimestampIsSet = true;
}
bool CommunicationTimestamps::sendTimestampIsSet() const
{
    return m_SendTimestampIsSet;
}

void CommunicationTimestamps::unsetSendTimestamp()
{
    m_SendTimestampIsSet = false;
}

std::shared_ptr<UInt64DTO> CommunicationTimestamps::getReceiveTimestamp() const
{
    return m_ReceiveTimestamp;
}


void CommunicationTimestamps::setReceiveTimestamp(std::shared_ptr<UInt64DTO> value)
{
    m_ReceiveTimestamp = value;
    m_ReceiveTimestampIsSet = true;
}
bool CommunicationTimestamps::receiveTimestampIsSet() const
{
    return m_ReceiveTimestampIsSet;
}

void CommunicationTimestamps::unsetReceiveTimestamp()
{
    m_ReceiveTimestampIsSet = false;
}

}
}
}
}

