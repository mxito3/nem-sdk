/**
 * Catapult REST API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.7.8
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.1-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "MosaicDTO.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

MosaicDTO::MosaicDTO()
{
}

MosaicDTO::~MosaicDTO()
{
}

void MosaicDTO::validate()
{
    // TODO: implement validation
}

web::json::value MosaicDTO::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    val[utility::conversions::to_string_t("amount")] = ModelBase::toJson(m_Amount);

    return val;
}

void MosaicDTO::fromJson(web::json::value& val)
{
    std::shared_ptr<UInt64DTO> newId(new UInt64DTO());
    newId->fromJson(val[utility::conversions::to_string_t("id")]);
    setId( newId );
    std::shared_ptr<UInt64DTO> newAmount(new UInt64DTO());
    newAmount->fromJson(val[utility::conversions::to_string_t("amount")]);
    setAmount( newAmount );
}

void MosaicDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    m_Id->toMultipart(multipart, utility::conversions::to_string_t("id."));
    m_Amount->toMultipart(multipart, utility::conversions::to_string_t("amount."));
}

void MosaicDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    std::shared_ptr<UInt64DTO> newId(new UInt64DTO());
    newId->fromMultiPart(multipart, utility::conversions::to_string_t("id."));
    setId( newId );
    std::shared_ptr<UInt64DTO> newAmount(new UInt64DTO());
    newAmount->fromMultiPart(multipart, utility::conversions::to_string_t("amount."));
    setAmount( newAmount );
}

std::shared_ptr<UInt64DTO> MosaicDTO::getId() const
{
    return m_Id;
}


void MosaicDTO::setId(std::shared_ptr<UInt64DTO> value)
{
    m_Id = value;
    
}
std::shared_ptr<UInt64DTO> MosaicDTO::getAmount() const
{
    return m_Amount;
}


void MosaicDTO::setAmount(std::shared_ptr<UInt64DTO> value)
{
    m_Amount = value;
    
}
}
}
}
}

